/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataDisplayOutput.java
 *
 * Created on 30.04.2011, 11:16:24
 */
package elements;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;

/**
 *
 * @author Moe
 */
public class DataDisplayOutput extends javax.swing.JPanel {

    private float value;
    private final List<ClickListener> clickListener = new ArrayList<ClickListener>();
    private ImageIcon downImage;
    private ImageIcon upImage;
    private ImageIcon sameImage;

    public interface ClickListener {

        public void onClick(DataDisplayOutput sender);
    }

    public DataDisplayOutput(int width, int height) {
        initComponents();
        loadGraphics();
        setSize(width, height);
        setClickListener();
    }

    private void setClickListener() {
        for (Component component : this.getComponents()) {
            component.addMouseListener(new MouseListener() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    somethingWasClicked(e);
                }

                @Override
                public void mousePressed(MouseEvent e) {
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            });
        }
    }

    private void loadGraphics() {
        this.downImage = new javax.swing.ImageIcon(getClass().getResource("/resource/down.png"));
        this.upImage = new javax.swing.ImageIcon(getClass().getResource("/resource/up.png"));
        this.sameImage = new javax.swing.ImageIcon(getClass().getResource("/resource/same.png"));
    }

    private void somethingWasClicked(MouseEvent e) {
        for (ClickListener listener : this.clickListener) {
            listener.onClick(this);
        }
    }

    public DataDisplayOutput setValue(float value) {
        if (value == this.value) {
            showSameGraphics();
        } else if (value > this.value) {
            showUpGraphics();
        } else {
            showDownGraphics();
        }

        this.value = value;
        updateValueLabel();

        return this;
    }

    private void showSameGraphics() {
        valueLabel.setIcon(this.sameImage);
    }

    private void showUpGraphics() {
        valueLabel.setIcon(this.upImage);
    }

    private void showDownGraphics() {
        valueLabel.setIcon(this.downImage);
    }

    private void updateValueLabel() {
        DecimalFormat f = new DecimalFormat("#0.00");
        valueLabel.setText(f.format(this.value));
    }

    public DataDisplayOutput setUnit(String unit) {
        unitLabel.setText(unit);
        return this;
    }

    public DataDisplayOutput setCaption(String caption) {
        captionLabel.setText(caption);
        return this;
    }

    /**
     * Adds a click listener which gets informed when an UI element is clicked.
     * @param listener Listener to add.
     */
    public void addClickListener(ClickListener listener) {
        this.clickListener.add(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        captionLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1, 1));
        setPreferredSize(new java.awt.Dimension(133, 120));
        setLayout(new java.awt.BorderLayout());

        captionLabel.setBackground(new java.awt.Color(0, 0, 0));
        captionLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
        captionLabel.setForeground(new java.awt.Color(51, 204, 0));
        captionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        captionLabel.setText("Vasoconstrictor");
        add(captionLabel, java.awt.BorderLayout.PAGE_START);

        valueLabel.setBackground(new java.awt.Color(0, 0, 0));
        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 32));
        valueLabel.setForeground(new java.awt.Color(51, 204, 0));
        valueLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        valueLabel.setText("000,00");
        add(valueLabel, java.awt.BorderLayout.CENTER);

        unitLabel.setBackground(new java.awt.Color(0, 0, 0));
        unitLabel.setFont(new java.awt.Font("Tahoma", 1, 18));
        unitLabel.setForeground(new java.awt.Color(51, 204, 0));
        unitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unitLabel.setText("kg / h / mÂ²");
        add(unitLabel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Is called when a UI element was clicked.
     * @param evt Event.
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel captionLabel;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    private void setAllBackgrounds(Component component, Color color) {
        component.setBackground(color);

        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                setAllBackgrounds(child, color);
            }
        }
    }

    public void setHighlight(boolean highlight) {
        setAllBackgrounds(this, highlight ? new Color(0, 80, 0) : Color.BLACK);
    }
}

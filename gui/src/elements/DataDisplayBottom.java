/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataDisplayBottom.java
 *
 * Created on 30.04.2011, 11:16:24
 */
package elements;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author Moe
 */
public class DataDisplayBottom extends javax.swing.JPanel {
    private float value;
    private final List<ClickListener> clickListener = new ArrayList<ClickListener>();
    private ImageIcon downImage;
    private ImageIcon upImage;
    private ImageIcon sameImage;

    private void loadGraphics() {
        this.downImage = new javax.swing.ImageIcon(getClass().getResource("/elements/down.png"));
        this.upImage = new javax.swing.ImageIcon(getClass().getResource("/elements/up.png"));
        this.sameImage = new javax.swing.ImageIcon(getClass().getResource("/elements/same.png"));        
    }

    private void setAllSizes(int width, int height) {
        Dimension d = new Dimension(width, height);
        
        setSize(d);
        setMinimumSize(d);
        setMaximumSize(d);
        setPreferredSize(d);
    }
    
    public interface ClickListener {
        public void onClick(DataDisplayBottom sender);
    }
    
    public DataDisplayBottom(int width, int height) {
        initComponents();
        loadGraphics();
        setAllSizes(width, height);
        
        for(Component component: this.getComponents()) {
            component.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    somethingWasClicked(e);
                }

                @Override
                public void mousePressed(MouseEvent e) {
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                }

                @Override
                public void mouseExited(MouseEvent e) {
                }
            });
        }
    }

    private void somethingWasClicked(MouseEvent e) {
        for(ClickListener listener: this.clickListener) {
            listener.onClick(this);
        }
    }
    
    public DataDisplayBottom setValue(float value) {
        if (value == this.value) {
            showSameGraphics();
        } else if (value > this.value) {
            showUpGraphics();
        } else {
            showDownGraphics();
        }
        
        this.value = value;
        updateValueLabel();
        
        return this;        
    }
    
    private void showSameGraphics() {
        valueLabel.setIcon(this.sameImage);
    }

    private void showUpGraphics() {
        valueLabel.setIcon(this.upImage);
    }

    private void showDownGraphics() {
        valueLabel.setIcon(this.downImage);
    }

    private void updateValueLabel() {
        DecimalFormat f = new DecimalFormat("#0.00");
        valueLabel.setText(f.format(this.value));
    }    
    
    public DataDisplayBottom setUnit(String unit) {
        unitLabel.setText(unit);
        return this;
    }
    
    public DataDisplayBottom setCaption(String caption) {
        captionLabel.setText(caption);
        return this;
    }    
    
    /**
     * Adds a click listener which gets informed when an UI element is clicked.
     * @param listener Listener to add.
     */
    public void addClickListener(ClickListener listener) {
        this.clickListener.add(listener);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        captionLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        valueLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(1, 1));
        setLayout(new java.awt.BorderLayout());

        captionLabel.setBackground(new java.awt.Color(0, 0, 0));
        captionLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        captionLabel.setForeground(new java.awt.Color(51, 204, 0));
        captionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        captionLabel.setText("Vasoconstrictor");
        add(captionLabel, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(51, 204, 0));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        valueLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valueLabel.setForeground(new java.awt.Color(51, 204, 0));
        valueLabel.setText("000,00");
        jPanel1.add(valueLabel);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        unitLabel.setBackground(new java.awt.Color(0, 0, 0));
        unitLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        unitLabel.setForeground(new java.awt.Color(51, 204, 0));
        unitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        unitLabel.setText("kg / h / mÂ²");
        add(unitLabel, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Is called when a UI element was clicked.
     * @param evt Event.
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel captionLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables

    private void setAllBackgrounds(Component component, Color color) {
        component.setBackground(color);
        
        if (component instanceof Container) {
            for(Component child: ((Container)component).getComponents()) {
                setAllBackgrounds(child, color);
            }                         
        }        
    }
    
    public void setHighlight(boolean highlight) {
        setAllBackgrounds(this, highlight ? new Color(0, 80, 0) : Color.BLACK);
    }
}
